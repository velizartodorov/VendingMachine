package vending_machine.intefaces

import drinks.impl.Drink
import order.Order
import order.OrderResponse

interface UserInterface {
    fun print(order: Order.Builder)
    fun process(order: Order.Builder): Order.Builder

    fun reprocess(e: IllegalArgumentException, order: Order.Builder) {
        println(e.message)
        this.print(order)
        this.process(order)
    }

    companion object {

        fun printLabel() {
            println(
                """
=======================================================
█╗   ██╗███████╗███╗   ██╗██████╗ ██╗███╗   ██╗ ██████╗
██║   ██║██╔════╝████╗  ██║██╔══██╗██║████╗  ██║██╔════╝
██║   ██║█████╗  ██╔██╗ ██║██║  ██║██║██╔██╗ ██║██║  ███╗
╚██╗ ██╔╝██╔══╝  ██║╚██╗██║██║  ██║██║██║╚██╗██║██║   ██║
 ╚████╔╝ ███████╗██║ ╚████║██████╔╝██║██║ ╚████║╚██████╔╝
  ╚═══╝  ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝
                                                        
███╗   ███╗ █████╗  ██████╗██╗  ██╗██╗███╗   ██╗███████╗
████╗ ████║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝
██╔████╔██║███████║██║     ███████║██║██╔██╗ ██║█████╗
██║╚██╔╝██║██╔══██║██║     ██╔══██║██║██║╚██╗██║██╔══╝
██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║██║██║ ╚████║███████╗
╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝
 _______________________________________________________
    |############################################|
    |#|                           |##############|
    |#|  =====  ..--''`  |~~``|   |##|````````|##|
    |#|  |   |  \     |  :    |   |##| Exact  |##|
    |#|  |___|   /___ |  | ___|   |##| Change |##|
    |#|  /=__\  ./.__\   |/,__\   |##| Only   |##|
    |#|  \__//   \__//    \__//   |##|________|##|
    |#|===========================|##############|
    |#|```````````````````````````|##############|
    |#| =.._      +++     //////  |##############|
    |#| \/  \     | |     \    \  |#|`````````|##|
    |#|  \___\    |_|     /___ /  |#| _______ |##|
    |#|  / __\\  /|_|\   // __\   |#| |1|2|3| |##|
    |#|  \__//-  \|_//   -\__//   |#| |4|5|6| |##|
    |#|===========================|#| |7|8|9| |##|
    |#|```````````````````````````|#| ``````` |##|
    |#| ..--    ______   .--._.   |#|[=======]|##|
    |#| \   \   |    |   |    |   |#|  _   _  |##|
    |#|  \___\  : ___:   | ___|   |#| ||| ( ) |##|
    |#|  / __\  |/ __\   // __\   |#| |||  `  |##|
    |#|  \__//   \__//  /_\__//   |#|  ~      |##|
    |#|===========================|#|_________|##|
    |#|```````````````````````````|##############|
    |############################################|
    |#|||||||||||||||||||||||||||||####```````###|
    |#||||||||||||PUSH|||||||||||||####\|||||/###|
    |############################################|
    \\\\\\\\\\\\\\\\\\\\\\///////////////////////
"""
            )
        }

        private fun getInterfaces() = sequenceOf(
            DrinkInterface,
            StrengthInterface,
            MilkInterface,
            SugarInterface,
            CoinsInterface
        )

        fun selectDrink(): OrderResponse {
            println("The vending machine is already running")
            val orderBuilder = Order.Builder()
            getInterfaces().forEach { ui ->
                ui.print(orderBuilder)
                ui.process(orderBuilder)
            }
            val order = orderBuilder.build()
            return Drink.getDrink(order.drink).prepare(order)
        }

    }

}