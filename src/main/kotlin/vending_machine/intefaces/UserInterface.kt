package vending_machine.intefaces

import drinks.impl.Drink
import order.Order
import order.OrderResponse

interface UserInterface {
    fun print(order: Order)
    fun process(order: Order): Order

    fun reprocess(e: IllegalArgumentException, order: Order) {
        println(e.message)
        this.print(order)
        this.process(order)
    }

    companion object {

        fun printLabel() {
            println(
                """
                =======================================================
                █╗   ██╗███████╗███╗   ██╗██████╗ ██╗███╗   ██╗ ██████╗
                ██║   ██║██╔════╝████╗  ██║██╔══██╗██║████╗  ██║██╔════╝
                ██║   ██║█████╗  ██╔██╗ ██║██║  ██║██║██╔██╗ ██║██║  ███╗
                ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║██║  ██║██║██║╚██╗██║██║   ██║
                 ╚████╔╝ ███████╗██║ ╚████║██████╔╝██║██║ ╚████║╚██████╔╝
                  ╚═══╝  ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝
                                                                        
                ███╗   ███╗ █████╗  ██████╗██╗  ██╗██╗███╗   ██╗███████╗
                ████╗ ████║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝
                ██╔████╔██║███████║██║     ███████║██║██╔██╗ ██║█████╗
                ██║╚██╔╝██║██╔══██║██║     ██╔══██║██║██║╚██╗██║██╔══╝
                ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║██║██║ ╚████║███████╗
                ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝
                 _______________________________________________________
                    |############################################|
                    |#|                           |##############|
                    |#|  =====  ..--''`  |~~``|   |##|````````|##|
                    |#|  |   |  \     |  :    |   |##| Exact  |##|
                    |#|  |___|   /___ |  | ___|   |##| Change |##|
                    |#|  /=__\  ./.__\   |/,__\   |##| Only   |##|
                    |#|  \__//   \__//    \__//   |##|________|##|
                    |#|===========================|##############|
                    |#|```````````````````````````|##############|
                    |#| =.._      +++     //////  |##############|
                    |#| \/  \     | |     \    \  |#|`````````|##|
                    |#|  \___\    |_|     /___ /  |#| _______ |##|
                    |#|  / __\\  /|_|\   // __\   |#| |1|2|3| |##|
                    |#|  \__//-  \|_//   -\__//   |#| |4|5|6| |##|
                    |#|===========================|#| |7|8|9| |##|
                    |#|```````````````````````````|#| ``````` |##|
                    |#| ..--    ______   .--._.   |#|[=======]|##|
                    |#| \   \   |    |   |    |   |#|  _   _  |##|
                    |#|  \___\  : ___:   | ___|   |#| ||| ( ) |##|
                    |#|  / __\  |/ __\   // __\   |#| |||  `  |##|
                    |#|  \__//   \__//  /_\__//   |#|  ~      |##|
                    |#|===========================|#|_________|##|
                    |#|```````````````````````````|##############|
                    |############################################|
                    |#|||||||||||||||||||||||||||||####```````###|
                    |#||||||||||||PUSH|||||||||||||####\|||||/###|
                    |############################################|
                    \\\\\\\\\\\\\\\\\\\\\\///////////////////////
                """
            )
        }

        private fun getInterfaces() = sequenceOf(
            DrinkInterface,
            StrengthInterface,
            MilkInterface,
            SugarInterface,
            CoinsInterface
        )

        fun selectDrink(): OrderResponse {
            println("The vending machine is already running")
            val order = Order(
                drink = null,
                milk = null,
                water = null,
                sugar = null,
                strength = null,
                coins = emptyList()
            )
            getInterfaces().forEach { ui ->
                ui.print(order)
                ui.process(order)
            }
            return Drink.getDrink(order.drink).prepare(order)
        }

    }

}